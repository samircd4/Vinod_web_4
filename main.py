import requests
from selectolax.parser import HTMLParser
import pandas as pd
from sendmail import send_mail




def get_data(current):
    print('scraping started!')
    results = []
    url = "https://ecomm.sirim.my/SirimEnquiry/search_model.aspx"
    for i in range(1,3):
        payload =f"ctl00%24ContentPlaceHolder1%24TSM1=ctl00%24ContentPlaceHolder1%24UpdatePanel2%7Cctl00%24ContentPlaceHolder1%24gvResults%24ctl01%24lnkbtnApproveDate&=ContentPlaceHolder1_TSM1_HiddenField%3D&=ctl00%24userid%3D&=ctl00%24screenname%3D&=__EVENTARGUMENT%3D&=__LASTFOCUS%3D&ctl00%24ContentPlaceHolder1%24txtSearch1=%20&__EVENTTARGET=ctl00%24ContentPlaceHolder1%24gvResults%24ctl01%24lnkbtnApproveDate&__VIEWSTATE=%%3D%3D&__VIEWSTATEGENERATOR=6EA7F05D&__ASYNCPOST=true&ctl00%24ContentPlaceHolder1%24SFcurrentpage={i}"
        headers = {
            "Accept": "*/*",
            "Accept-Language": "en-US,en;q=0.9",
            "Cache-Control": "no-cache",
            "Connection": "keep-alive",
            "Cookie": "cookiesession1=678A3E2E27008B684AD342808F663FAE; ASP.NET_SessionId=bexrri50hstymmbvomgo3w0d",
            "Origin": "https://ecomm.sirim.my",
            "Referer": "https://ecomm.sirim.my/SirimEnquiry/search_model.aspx",
            "Sec-Fetch-Dest": "empty",
            "Sec-Fetch-Mode": "cors",
            "Sec-Fetch-Site": "same-origin",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36",
            "X-MicrosoftAjax": "Delta=true",
            "X-Requested-With": "XMLHttpRequest",
            "sec-ch-ua": '"Google Chrome";v="113", "Chromium";v="113", "Not-A.Brand";v="24"',
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": '"Windows"',
            "Content-Type": "application/x-www-form-urlencoded"
        }

        response = requests.request("POST", url, data=payload, headers=headers)

        html = HTMLParser(response.text)

        rows = html.css('table#ContentPlaceHolder1_gvResults tbody tr')
        brands = ['Samsung', 'Huawei', 'Honor', 'Xiaomi', 'Realme', 'Samusung', 'Redmi', 'Poco', 'Google', 'Apple', 'Vivo', 'Oppo', 'Oneplus', 'Motorola', 'Asus']
        for row in rows[1:]:
            profile = {}
            details = row.css('td')
            applicent_name = details[2].css_first('span').text()
            model_description = details[3].css_first('span').text()
            brand = details[4].css_first('span').text()
            aproval_code = details[5].css_first('span').text()
            device_cate = details[6].css_first('span').text()
            approval_date = details[7].css_first('span').text()
            expire_date = details[8].css_first('span').text()
            if brand.title() in brands:
                profile['applicent_name'] = applicent_name
                profile['model_description'] = model_description
                profile['brand'] = brand.upper()
                profile['aproval_code'] = aproval_code
                profile['device_cate'] = device_cate
                profile['approval_date'] = approval_date
                profile['expire_date'] = expire_date
                results.append(profile)
        print(f'Page number {i} is done!')
    
    df = pd.DataFrame(results)
    df.to_csv(current, index=False)

def compare_data(current, master):
    current_df = pd.read_csv(current)
    master_df = pd.read_csv(master)
    
    df_diff = current_df.merge(master_df, indicator=True, how='outer')
    compared_df = df_diff.loc[lambda x : x['_merge'] == 'left_only']
    isEmpty = len(compared_df)==0
    if not isEmpty:
        new_df = compared_df.iloc[:, [0, 1,2,3,4,5,6]]
        print(f'{len(new_df)} New data found {compared_df["aproval_code"]}')
        update_master_df = pd.concat([master_df, new_df])
        update_master_df.to_csv(master, index=False)
        send_mail(new_df)
    else:
        print('Data is up to date!')

    print('Data compared!')


def main():
    current_file = 'current.csv'
    master_file = 'master.csv'
    get_data(current_file)
    compare_data(current_file, master_file)


if __name__ == '__main__':
    main()